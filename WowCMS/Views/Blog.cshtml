@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@{
	Layout = "default.cshtml";
	IHtmlContent imgSrc = null;
    var query = HttpContextAccessor.HttpContext.Request.Query["query"];
    var tagged = HttpContextAccessor.HttpContext.Request.Query["tag"];
	if (Model.HasProperty("image")) {
		IPublishedContent logo = Model.Value<IPublishedContent>("image");
		if (logo != null) {
			imgSrc = Url.GetCropUrl(logo, width: 450, quality: 100);
		}
	}
	string[] MonthNames = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
    IEnumerable<IPublishedContent> posts = Model.Children();
    if (!string.IsNullOrEmpty(query)) {
        var cleanQuery = query.ToString().ToLower();
        posts = Model.Children().Where(x => x.Value<string>("title").ToLower().Contains(cleanQuery) ||
            x.Value<string>("blurb").ToLower().Contains(cleanQuery));
    }
    if (!string.IsNullOrEmpty(tagged)) {
        var cleanQuery = tagged.ToString();
        posts = posts.Where(x => x.Value<string[]>("tags").Contains(cleanQuery));
    }
}
<div class="uk-container-expand site">
    <section>
        <article class="lt-back img-back" style="background-image: url('@imgSrc');">
            <div class="uk-container-expand">
                <div class="uk-card search">
                    <div class="uk-card-body uk-text-center">
                        <a href="@Model.Url()">
                            <img src="/images/wows-global-insights.png" width="420">
                         </a>
                    </div>
                    <div class="uk-card-footer uk-text-center">
                        <form id="search-form" class="uk-search uk-search-default" method="get">
                            <div>
                                <a href="javascript:document.getElementById('search-form').submit();" class="uk-search-icon-flip" uk-search-icon></a>
                                <input id="query" name="query" class="uk-search-input" type="search" placeholder="Enter your search topic" value="@query">
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </article>
        <article class="lt-back blog">
            <ul class="uk-child-width-1-2@m uk-child-width-1-3@l uk-child-width-1-1 uk-grid-match uk-flex-stretch" uk-grid>
@{ 
	foreach(IPublishedContent node in posts.OrderBy(x => x.Value<DateTime>("published")).Reverse()) {
		var tags = "";
		var title = node.Value<string>("title");
		var author = node.Value<string>("author");
		var timestamp = node.Value<DateTime>("published");
		var formattedTimestamp = MonthNames[timestamp.Month - 1] + " " + timestamp.Day + ", " + timestamp.Year;
		var blurb = Html.Raw(node.Value<string>("blurb").Substring(0, 150) + "...");

		string[] tagList = node.Value<string[]>("tags");

		IHtmlContent blgSrc = null;
		if (node.HasProperty("image")) {
			IPublishedContent logo = node.Value<IPublishedContent>("image");
			if (logo != null) {
				blgSrc = Url.GetCropUrl(logo, width: 120, height: 120, quality: 100);
			}
		}
        <li>
            <div class="uk-card">
				<div class="uk-card-media-top" style="background-image: url('@blgSrc');">
					<ul>
        @{ 
		    if (tagList != null) {
			    foreach (string tag in tagList) {
                    var tagUrl = Model.Url() + "?tag=" + Html.UrlEncoder.Encode(tag);
					<li><a href="@tagUrl">@tag</a></li>
			    }
		    }
        }
					</ul>
				</div>
                <div class="uk-card-body">
                    <a class="uk-card-title" href="@node.Url()">@title</a>
                    <p class="author">@author <span class="timestamp">@formattedTimestamp</span></p>
                    @blurb
                </div>
                <div class="uk-card-footer">
                    <a class="uk-btn" href="@node.Url()">Read more</a>
                </div>
            </div>
        </li>
	}
}
            </ul>
        </article>
    </section>
</div>